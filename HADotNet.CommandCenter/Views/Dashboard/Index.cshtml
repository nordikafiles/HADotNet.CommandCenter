@model TileDisplayViewModel
@{
    ViewData["Title"] = "Home";
    ViewBag.BaseTileSizePx = Model.PageLayout.BaseTileSizePx;
    ViewBag.TilePadding = Model.PageLayout.TileSpacingPx;
}
@section Header
{
    @if (!string.IsNullOrWhiteSpace(Model.Theme.Page?.PageFontFace))
    {
        if (!string.IsNullOrWhiteSpace(Model.Theme.Page?.PageFontWeight))
        {
            <link href="https://fonts.googleapis.com/css?family=@(Model.Theme.Page.PageFontFace.Replace(" ", "+")):@(Model.Theme.Page.PageFontWeight)&display=swap" rel="stylesheet">
        }
        else
        {
            <link href="https://fonts.googleapis.com/css?family=@(Model.Theme.Page.PageFontFace.Replace(" ", "+"))&display=swap" rel="stylesheet">
        }
    }

    <style type="text/css">
        body.dashboard
        {
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Page?.BackgroundColor))
            {
                @: background-color: @(Model.Theme.Page.BackgroundColor);
            }
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Page?.BackgroundGradient))
            {
                @: background-image: @(Model.Theme.Page.BackgroundGradient);
            }
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Page?.BackgroundImageUrl))
            {
                @: background-image: url('@(Model.Theme.Page.BackgroundImageUrl)');
                @: background-size: cover;
                @: background-position: 50%;
            }
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Page?.BackgroundImageBlendMode))
            {
                @: background-blend-mode: @(Model.Theme.Page.BackgroundImageBlendMode);
            }
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Page?.PageFontFace))
            {
                @: font-family: '@(Model.Theme.Page.PageFontFace)';
            }
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Page?.PageFontWeight))
            {
                @: font-weight: @(Model.Theme.Page.PageFontWeight);
            }
        }

        body.dashboard > .tiles
        {
            height: @(Model.PageLayout.DeviceHeightPx)px;
            width: @(Model.PageLayout.DeviceWidthPx)px;
        }

        body.dashboard > .tiles > .tile
        {
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Page?.PageFontSize))
            {
                @: font-size: @Model.Theme.Page.PageFontSize;
            }
            else
            {
                @: font-size: @(ViewBag.BaseTileSizePx * 0.125)px;
            }

            @if (!string.IsNullOrWhiteSpace(Model.Theme.Tiles?.TileBackgroundColor))
            {
                @: background-color: @(Model.Theme.Tiles.TileBackgroundColor);
            }
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Tiles?.TileBoxShadow))
            {
                @: box-shadow: @(Model.Theme.Tiles.TileBoxShadow);
            }
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Tiles?.TileFontColor))
            {
                @: color: @(Model.Theme.Tiles.TileFontColor);
            }
            @if (Model.Theme.Tiles?.TileBorderRadius > 0)
            {
                @: border-radius: @(Model.Theme.Tiles.TileBorderRadius)px;
            }
        }

        body.dashboard > .tiles > .tile .value.state-on
        {
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Tiles?.TileDefaultOnColor))
            {
                @: color: @(Model.Theme.Tiles.TileDefaultOnColor);
            }
        }
        body.dashboard > .tiles > .tile .value.state-off
        {
            @if (!string.IsNullOrWhiteSpace(Model.Theme.Tiles?.TileDefaultOffColor))
            {
                @: color: @(Model.Theme.Tiles.TileDefaultOffColor);
            }
        }

        @if (!string.IsNullOrWhiteSpace(Model.Theme.AdditionalCss))
        {
            @Html.Raw(Model.Theme.AdditionalCss);
        }
    </style>
}

<div class="tiles">
    @if (Model.Tiles == null || Model.Tiles.Count() == 0)
    {
        <h2><em>No tiles are configured on this page.</em></h2>
    }
    else
    {
        foreach (var item in Model.Tiles?.Where(m => m.Layout != null))
        {
            <partial name="Tiles/TileView@(item.Tile.TypeProper)" model="@item" />
        }
    }
</div>

<div id="alerts" style="display: none;color: #C00 !important;background-color: #CCC !important;font-size: 18px !important;padding: 3px !important;position: fixed;top: 0;left: 0;opacity: 0.8;pointer-events: none;user-select: none;">
    <span class="mdi mdi-comment-alert mdi-24px red icon" style="vertical-align: middle;"></span> <span class="alert-message"></span>
</div>

@section scripts
{
    <script>
        window.ccOptions.autoReturn = @Model.CurrentPage.AutoReturnSeconds;
        window.ccOptions.pageId = '@Model.CurrentPage.Name';
        window.ccOptions.baseUrl = '@Model.SystemSettings.BaseUri';
        window.ccOptions.overrideAssetUrl = '@Model.SystemSettings.OverrideAssetUri';
        window.ccOptions.token = '@Model.SystemSettings.AccessToken';
    </script>
}